version: "3.9"

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--api=true"
      - "--api.dashboard"
      - "--api.insecure=true"
      - "--providers.docker=true" # Включаем докер провайдер. После этого traefik будет следить за появлением специальных меток на других контейнерах и перенастраивать все согласно этим меткам.
      - "--providers.docker.exposedbydefault=false" # Запрещаем автоматическое добавление HTTP сервисов и HTTP маршрутов в traefik. Если этого не сделать, то traefik опубликует все docker контейнеры, в которых есть expose порта наружу автоматически. В качестве доменного имени он будет использовать имя контейнера.
      - "--entrypoints.web.address=:80"
#      - "--entrypoints.traefik.address=:8080"
#      - "--entrypoints.web.http.redirections.entryPoint.to=websecure" # Перенаправление с HTTP на HTTPS
#      - "--entrypoints.websecure.address=:443" # Создали entrypoint
#      - "--certificatesresolvers.myresolver.acme.httpchallenge=true" # Настраиваем режим выдачи сертификатов Let’s Encrypt через http challenge
#      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web" # Настраиваем entrypoint для http challenge
#      - "--certificatesresolvers.myresolver.acme.email=<EMAIL>" # Настраиваем <email> адрес для регистрации в центре сертификации
#      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Меняем стандартное расположение файла acme.json. В этот файл будут записываться выданные сертификаты. Дело в том, что стандартное расположение файла “/acme.json" в корне не позволяет хранить этот файл на подключенном томе.
    ports:
      - 80:80
      - 8080:8080
#      - 443:443
#      - 9000:9000
    volumes:
      - /app/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - /path/to/docker/traefik/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.maks-koits.space`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"
    restart: unless-stopped
    networks:
      - traefik
#  portainer:
#    image: portainer/portainer-ce:linux-amd64
#    container_name: "portainer"
#    ports:
#      - 9443:9443
#      - 9000:9000
#      volumes:
#        - data:/data
#        - /var/run/docker.sock:/var/run/docker.sock
#    restart: unless-stopped
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.registry.rule=Host(`portainer.maks-koits.space`)"
#      - "traefik.http.routers.registry.loadBalancer.server.port=9000"
#      - "traefik.docker.network=traefik"
  maks-koits.github.io:
    image: nginx:stable-alpine
    container_name: "maks-koits"
#    ports:
#      - 80:80
    volumes:
        - /app/Maks-Koits.github.io:/usr/share/nginx/html
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maks-koits.rule=Host(`maks-koits.space`)"
      - "traefik.http.routers.maks-koits.entrypoints=web"
    networks:
      - traefik

  node_exporter:
    image: node-exporter:latest
    container_name: "node-exporter"
    volumes:
      - '/:/host:ro,rslave'
    command:
      - '--path.rootfs=/host'
    network_mode: traefik
#    pid: host
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maks-koits.rule=Host(`node_exporter.maks-koits.space`)"
      - "traefik.http.routers.maks-koits.entrypoints=web"
    networks:
      - traefik

networks:
  traefik:
    driver: bridge

#portainer_data:/data
#volumes:
#    portainer_data: